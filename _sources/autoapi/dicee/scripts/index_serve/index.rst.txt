dicee.scripts.index_serve
=========================

.. py:module:: dicee.scripts.index_serve

.. autoapi-nested-parse::

   $ docker pull qdrant/qdrant && docker run -p 6333:6333 -p 6334:6334      -v $(pwd)/qdrant_storage:/qdrant/storage:z      qdrant/qdrant
   $ dicee_vector_db --index --serve --path CountryEmbeddings --collection "countries_vdb"



Attributes
----------

.. autoapisummary::

   dicee.scripts.index_serve.app
   dicee.scripts.index_serve.neural_searcher


Classes
-------

.. autoapisummary::

   dicee.scripts.index_serve.NeuralSearcher
   dicee.scripts.index_serve.StringListRequest


Functions
---------

.. autoapisummary::

   dicee.scripts.index_serve.get_default_arguments
   dicee.scripts.index_serve.index
   dicee.scripts.index_serve.root
   dicee.scripts.index_serve.search_embeddings
   dicee.scripts.index_serve.retrieve_embeddings
   dicee.scripts.index_serve.search_embeddings_batch
   dicee.scripts.index_serve.serve
   dicee.scripts.index_serve.main


Module Contents
---------------

.. py:function:: get_default_arguments()

.. py:function:: index(args)

.. py:data:: app

.. py:data:: neural_searcher
   :value: None


.. py:class:: NeuralSearcher(args)

   .. py:attribute:: collection_name


   .. py:attribute:: entity_to_idx
      :value: None



   .. py:attribute:: qdrant_client


   .. py:attribute:: topk
      :value: 5



   .. py:method:: retrieve_embedding(entity: str = None, entities: List[str] = None) -> List


   .. py:method:: search(entity: str)


.. py:function:: root()
   :async:


.. py:function:: search_embeddings(q: str)
   :async:


.. py:function:: retrieve_embeddings(q: str)
   :async:


.. py:class:: StringListRequest(/, **data: Any)

   Bases: :py:obj:`pydantic.BaseModel`


   !!! abstract "Usage Documentation"
       [Models](../concepts/models.md)

   A base class for creating Pydantic models.

   .. attribute:: __class_vars__

      The names of the class variables defined on the model.

   .. attribute:: __private_attributes__

      Metadata about the private attributes of the model.

   .. attribute:: __signature__

      The synthesized `__init__` [`Signature`][inspect.Signature] of the model.

   .. attribute:: __pydantic_complete__

      Whether model building is completed, or if there are still undefined fields.

   .. attribute:: __pydantic_core_schema__

      The core schema of the model.

   .. attribute:: __pydantic_custom_init__

      Whether the model has a custom `__init__` function.

   .. attribute:: __pydantic_decorators__

      Metadata containing the decorators defined on the model.
      This replaces `Model.__validators__` and `Model.__root_validators__` from Pydantic V1.

   .. attribute:: __pydantic_generic_metadata__

      Metadata for generic models; contains data used for a similar purpose to
      __args__, __origin__, __parameters__ in typing-module generics. May eventually be replaced by these.

   .. attribute:: __pydantic_parent_namespace__

      Parent namespace of the model, used for automatic rebuilding of models.

   .. attribute:: __pydantic_post_init__

      The name of the post-init method for the model, if defined.

   .. attribute:: __pydantic_root_model__

      Whether the model is a [`RootModel`][pydantic.root_model.RootModel].

   .. attribute:: __pydantic_serializer__

      The `pydantic-core` `SchemaSerializer` used to dump instances of the model.

   .. attribute:: __pydantic_validator__

      The `pydantic-core` `SchemaValidator` used to validate instances of the model.

   .. attribute:: __pydantic_fields__

      A dictionary of field names and their corresponding [`FieldInfo`][pydantic.fields.FieldInfo] objects.

   .. attribute:: __pydantic_computed_fields__

      A dictionary of computed field names and their corresponding [`ComputedFieldInfo`][pydantic.fields.ComputedFieldInfo] objects.

   .. attribute:: __pydantic_extra__

      A dictionary containing extra values, if [`extra`][pydantic.config.ConfigDict.extra]
      is set to `'allow'`.

   .. attribute:: __pydantic_fields_set__

      The names of fields explicitly set during instantiation.

   .. attribute:: __pydantic_private__

      Values of private attributes set on the model instance.


   .. py:attribute:: queries
      :type:  List[str]


   .. py:attribute:: reducer
      :type:  Optional[str]
      :value: None



.. py:function:: search_embeddings_batch(request: StringListRequest)
   :async:


.. py:function:: serve(args)

.. py:function:: main()

