dicee.literal_classes
=====================

.. py:module:: dicee.literal_classes


Classes
-------

.. autoapisummary::

   dicee.literal_classes.GatedLinearUnit
   dicee.literal_classes.LiteralEmbeddings
   dicee.literal_classes.LiteralDataset


Module Contents
---------------

.. py:class:: GatedLinearUnit(input_dim, gated_residual=True)

   Bases: :py:obj:`torch.nn.Module`


   Applies a gated linear unit (GLU) operation:
   Splits the input in half along the last dimension,
   applies a sigmoid gate to one half and multiplies it with the other.


   .. py:attribute:: proj


   .. py:attribute:: gate_residual
      :value: True



   .. py:method:: forward(x1, x2)


.. py:class:: LiteralEmbeddings(num_of_data_properties: int, embedding_dims: int, entity_embeddings: torch.tensor, dropout: float = 0.3, gate_residual=True, freeze_entity_embeddings=True)

   Bases: :py:obj:`torch.nn.Module`


   A model for learning and predicting numerical literals using pre-trained KGE.

   .. attribute:: num_of_data_properties

      Number of data properties (attributes).

      :type: int

   .. attribute:: embedding_dims

      Dimension of the embeddings.

      :type: int

   .. attribute:: entity_embeddings

      Pre-trained entity embeddings.

      :type: torch.tensor

   .. attribute:: dropout

      Dropout rate for regularization.

      :type: float

   .. attribute:: gate_residual

      Whether to use gated residual connections.

      :type: bool

   .. attribute:: freeze_entity_embeddings

      Whether to freeze the entity embeddings during training.

      :type: bool


   .. py:attribute:: embedding_dim


   .. py:attribute:: num_of_data_properties


   .. py:attribute:: hidden_dim


   .. py:attribute:: entity_embeddings


   .. py:attribute:: data_property_embeddings


   .. py:attribute:: fc


   .. py:attribute:: fc_out


   .. py:attribute:: dropout


   .. py:attribute:: residual


   .. py:attribute:: layer_norm


   .. py:method:: forward(entity_idx, attr_idx)

      :param entity_idx: Entity indices (batch).
      :type entity_idx: Tensor
      :param attr_idx: Attribute (Data property)  indices (batch).
      :type attr_idx: Tensor

      :returns: scalar predictions.
      :rtype: Tensor



.. py:class:: LiteralDataset(file_path: str, ent_idx: dict = None, normalization_type: str = 'z-norm', sampling_ratio: float = None, loader_backend: str = 'pandas')

   Bases: :py:obj:`torch.utils.data.Dataset`


   Dataset for loading and processing literal data for training Literal Embedding model.
   This dataset handles the loading, normalization, and preparation of triples
   for training a literal embedding model.

   Extends torch.utils.data.Dataset for supporting PyTorch dataloaders.

   .. attribute:: train_file_path

      Path to the training data file.

      :type: str

   .. attribute:: normalization

      Type of normalization to apply ('z-norm', 'min-max', or None).

      :type: str

   .. attribute:: normalization_params

      Parameters used for normalization.

      :type: dict

   .. attribute:: sampling_ratio

      Fraction of the training set to use for ablations.

      :type: float

   .. attribute:: entity_to_idx

      Mapping of entities to their indices.

      :type: dict

   .. attribute:: num_entities

      Total number of entities.

      :type: int

   .. attribute:: data_property_to_idx

      Mapping of data properties to their indices.

      :type: dict

   .. attribute:: num_data_properties

      Total number of data properties.

      :type: int

   .. attribute:: loader_backend

      Backend to use for loading data ('pandas' or 'rdflib').

      :type: str


   .. py:attribute:: train_file_path


   .. py:attribute:: loader_backend
      :value: 'pandas'



   .. py:attribute:: normalization_type
      :value: 'z-norm'



   .. py:attribute:: normalization_params


   .. py:attribute:: sampling_ratio
      :value: None



   .. py:attribute:: entity_to_idx
      :value: None



   .. py:attribute:: num_entities


   .. py:method:: __getitem__(index)


   .. py:method:: __len__()


   .. py:method:: load_and_validate_literal_data(file_path: str = None, loader_backend: str = 'pandas') -> pandas.DataFrame
      :staticmethod:


      Loads and validates the literal data file.
      :param file_path: Path to the literal data file.
      :type file_path: str

      :returns: DataFrame containing the loaded and validated data.
      :rtype: pd.DataFrame



   .. py:method:: denormalize(preds_norm, attributes, normalization_params) -> numpy.ndarray
      :staticmethod:


      Denormalizes the predictions based on the normalization type.

      Args:
      preds_norm (np.ndarray): Normalized predictions to be denormalized.
      attributes (list): List of attributes corresponding to the predictions.
      normalization_params (dict): Dictionary containing normalization parameters for each attribute.

      :returns: Denormalized predictions.
      :rtype: np.ndarray



   .. py:method:: get_literals_rdflib(path: str)
      :staticmethod:


      Loads triples from an RDF file and extracts numerical literals.

      :param path: The path to the RDF file.
      :type path: str

      :returns: DataFrame containing the extracted triples with literals.
      :rtype: pd.DataFrame



